
------------------Practica 1 ------------------------------------



CIFRADO GPG.


#Instalación de la herramienta GPG2:
sudo dnf install gnupg2 -y

#Nos ubicamos en el escritorio para crear un nuevo archivo de texto, el que vamos a cifrar posteriormente:
cd ./Desktop
echo "Hola" > archivo.txt

#Verificamos la existencia del archivo:
ls -l
cat archivo.txt

# Ciframos el archivo 'archivo' de forma simétrica usando GPG2 (El sistema pedirá una contraseña para cifrar. Se debe escribir dos veces. Esto generará un nuevo archivo: 'archivo.txt.gpg')
gpg2 -c archivo

# Verificamos que el archivo cifrado fue creado correctamente (Aquí veremos tanto el archivo original como el cifrado: 'archivo.txt' y 'archivo.txt.gpg')
ls

# Intentamos leer el archivo cifrado con 'cat' (no será legible para humanos)
cat archivo.gpg

# Desciframos el archivo cifrado para ver su contenido original (Se nos pedirá la misma contraseña que usamos al cifrar. Una vez ingresada, veremos el texto original en pantalla)
gpg2 -d archivo.txt.gpg


------------------Practica 1 ------------------------------------



# Bloquear conexiones entrantes a los puertos 80 (HTTP), 21 (FTP) y 22 (SSH)
sudo iptables -A INPUT -p tcp --dport 80 -j DROP
sudo iptables -A INPUT -p tcp --dport 21 -j DROP
sudo iptables -A INPUT -p tcp --dport 22 -j DROP

# Verificar reglas
sudo iptables -L


# Eliminar las reglas de bloqueo
sudo iptables -D INPUT -p tcp --dport 80 -j DROP
sudo iptables -D INPUT -p tcp --dport 21 -j DROP
sudo iptables -D INPUT -p tcp --dport 22 -j DROP

# Eliminar las reglas de acceptar
sudo iptables -D INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -D INPUT -p tcp --dport 21 -j ACCEPT
sudo iptables -D INPUT -p tcp --dport 22 -j ACCEPT


# O alternativamente, permitir explícitamente los puertos
sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 21 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT

# Verificar reglas
sudo iptables -L





En Red Hat (firewalld)


Desactivar
sudo firewall-cmd --permanent --remove-service=http
sudo firewall-cmd --permanent --remove-service=ftp
sudo firewall-cmd --permanent --remove-service=ssh
sudo firewall-cmd --reload
sudo firewall-cmd --list-all  # Ver reglas

Aceptar
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=ftp
sudo firewall-cmd --permanent --add-service=ssh
sudo firewall-cmd --reload
sudo firewall-cmd --list-all  # Ver reglas
------------------Practica 3 ------------------------------------


#Actualizar el sistema y habilitar los repositorios necesarios#

--------------1ra Parte-------------------------------------------------------------

---------------Primero, asegúrate de tener los repositorios correctos habilitados-----


sudo dnf install epel-release
sudo dnf config-manager --set-enabled crb

sudo dnf update -y
sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm -y
sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms
sudo dnf config-manager --set-enabled crb
sudo dnf  upgrade -y


-----------------2da parte----------------------------------------------

#Actualizar Cache de liberias#

sudo ldconfig


#Instalar las dependencias necesarias para compilar Snort#

sudo dnf install flex bison gcc gcc-c++ make cmake autoconf libtool git nano unzip wget \
    libpcap-devel pcre-devel libdnet-devel hwloc-devel openssl-devel zlib-devel \
    luajit-devel pkgconfig pkgconf libunwind-devel libnfnetlink-devel \
    libnetfilter_queue-devel libmnl-devel xz-devel gperftools libuuid-devel \
    hyperscan hyperscan-devel -y


---------------------3ra Parte--------------------------------------


#instalar libdaq#

git clone https://github.com/snort3/libdaq.git 
cd libdaq/ 
./bootstrap 
./configure && make && sudo make install 
sudo ldconfig 
cd ../ 

------------------4ta parte------------------------------------------

// Instalar PCRE2 y sus archivos de desarrollo //

sudo dnf install pcre2 pcre2-devel -y



------------------5ta parte------------------------------------------

#instalar SNORT#

git clone https://github.com/snort3/snort3.git 
cd snort3 
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH 
export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH 
export CFLAGS="-O3" 
export CXXFLAGS="-O3 -fno-rtti" 
./configure_cmake.sh --prefix=/usr/local/snort --enable-tcmalloc 
cd build/ 
make -j$(nproc) 
sudo make -j$(nproc) install 
cd ../../ 
sudo ldconfig 
/usr/local/snort/bin/snort


----------------------6ta parte----------------------------------

sudo ln -s /usr/local/snort/bin/snort /usr/bin/snort

----------------------7ma parte----------------------------------

#Verificar SNORT#
snort -V

#Configurar SNORT#

sudo nano /usr/local/snort/etc/snort/snort.lua
       HOME_NET = '10.0.0.216/24'

#Verificación SNORT#

snort -T -c /usr/local/snort/etc/snort/snort.lua


-------------------8va parte-------------------------------------

#Reglas Locales#

sudo nano /usr/local/snort/etc/snort/local.lua



----------------------Texto que ira en el nano local.lua--------------------------
	
	alert icmp any any -> any any ( msg:"ICMP Traffic Detected"; sid:10000001; metadata:policy security-ips alert; )


----------------------Activacion-------------------------------------------------

sudo ip link set dev ens160 promisc on



----------------------9na Parte-----------------------------------------------

sudo snort -c /usr/local/snort/etc/snort/snort.lua -R /usr/local/snort/etc/snort/local.lua -i ens160 -A alert_fast -s 65535 -k none


--------------------------10ma parte----------------------
#HOST
hacer ping a la vm

ejemplo: (cmd) ping 10.0.0.216


-------------------------11va parte--------------------------------

Introducir este texto en  reglas locales(8va parte).

metadata:policy security-ips alert;
alert tcp any any <> any 21 (msg:"FTP Traffic Detected Port 21"; sid:10000003; rev:1;)
alert tcp any any <> any 22 (msg:"SSH Traffic Detected Port 22"; sid:10000004; rev:1;)
alert tcp any any <> any 80 (msg:"HTTP Traffic Detected Port 80"; sid:10000005; rev:1;)


---------------------12va parte---------------------------------
#HOST
entrar a la ip de la vm por el navegador

ejemplo: poner en el buscador esto "10.0.0.216"

------------------Practica 4 ------------------------------------



----------Monitoreo de logs-----------------

sudo tail -f /var/log/secure



-------------Dependencias---------------------------------

sudo dnf install epel-release -y


--------------Instalación de Google Authenticator-------------------


sudo dnf install google-authenticator qrencode qrencode-libs



---------------Poner el servidor permisivo-----------------

getenforce (verificar)

setenforce 0 (modo permisivo)


----------------Ejecutar google-authenticator---------------------


google-authenticator


----------Otorgar permisos al archivo 2FA--------------------------

sudo chmod 600 /home/eze-20242286/.google_authenticator

sudo chown eze-20242286:eze-20242286 /home/eze-20242286/.google_authenticator



----------Activar el puerto ntp para poder sincronizar el reloj---------------

 sudo firewall-cmd --add-service=ntp --permanent
 sudo firewall-cmd --reload


-------------Habilitar sincronizacion-----------------------

sudo timedatectl set-ntp yes  # Habilita sincronización automática
sudo systemctl restart chronyd 


-------------Configuracion sshd----------------------

sudo nano /etc/ssh/sshd_config.d/10-mfa.conf

ChallengeResponseAuthentication yes
UsePam yes
PubkeyAuthentication yes
Match all
        AuthenticationMethods publickey,keyboard-interactive



---------------Configuración en Pam-------------

sudo nano /etc/pam.d/sshd

Añadir en la segunda o ultima linea:

auth required pam_google_authenticator.so
